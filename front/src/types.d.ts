// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Vite
// plugin that tells the Electron app where to look for the Vite-bundled app code (depending on

// whether you're running in development or production).
declare const MAIN_WINDOW_VITE_DEV_SERVER_URL: string;
declare const MAIN_WINDOW_VITE_NAME: string;

// Preload types
interface ThemeModeContext {
  toggle: () => Promise<boolean>;
  dark: () => Promise<void>;
  light: () => Promise<void>;
  system: () => Promise<boolean>;
  current: () => Promise<"dark" | "light" | "system">;
}
interface ElectronWindow {
  minimize: () => Promise<void>;
  maximize: () => Promise<void>;
  close: () => Promise<void>;
}
interface XContext {
  helloWorld: () => Promise<boolean>;
  createFile: (content: string) => Promise<boolean>;
  runBashScript: () => Promise<string>;
  runBin: () => Promise<string>;
  selectFile: () => Promise<string | null>;
  openFile: (path: string) => Promise<string | null>;
  selectDirectory: () => Promise<DirWFilePaths | null>;
}

interface EasyFormContext {
  selectFile: () => Promise<string | null>;
  selectFiles: () => Promise<string[] | null>;
  openFile: (path: string) => Promise<string | null>;
  selectDirectory: () => Promise<DirWFilePaths | null>;
  readFile: (path: string) => Promise<{
    content: string; // Base64-encoded content
  }>;
  saveImage: (dataUrl: string) => Promise<string>;
  isFileExistent: (filePath: string) => Promise<boolean>;
}

declare interface Window {
  themeMode: ThemeModeContext;
  electronWindow: ElectronWindow;
  xContext: XContext;
  easyFormContext: EasyFormContext;
}

// custom helpers types
type DirWFilePaths = {
  path: string;
  filePaths: string[];
}

type ChangeLine = {
  originalLine: string,
  filledLine: string
  id: number,
  contextKeys: (string | null)[],
  // contextKey: string | null,
  entryIndex: number,
  lineIndex: number,
}
